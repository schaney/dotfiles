# -*- mode: sh;-*-
export PATH=$HOME/.local/bin:$HOME/.scripts:$HOME/local/bin:/opt/local/bin:/opt/local/sbin:/usr/local/sbin:/usr/local/bin:$PATH
export ADZERK_REPO_PATH=$HOME/dev/adzerk/adzerk
export PACS_REPO=$HOME/dev/adzerk/pacs
export EDITOR="TERM=xterm-24bits emacsclient -a \"\" -t"
export XDG_CONFIG_HOME=$HOME/.config
export TERM=xterm-256color
export ITERM_24BIT=yes
export GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWUNTRACKEDFILES=1
export MONO_PATH=/usr/lib/mono
export NODE_PATH=/usr/local/lib/node_modules
export KONSOLE_DBUS_SESSION=true
export HISTFILESIZE=100000000
export HISTSIZE=$HISTFILESIZE
export HISTCONTROL=ignoreboth
export HISTTIMEFORMAT='%F %T '
export PROMPT_COMMAND='history -a'
export QT_AUTO_SCREEN_SCALE_FACTOR=0
export ZERKENV_BUCKET=zerkenv
export ZERKENV_REGION=us-east-1
export AWS_DEFAULT_REGION=us-east-1
export AWS_REGION=$AWS_DEFAULT_REGION
export BROWSER=firefox
[ -d $HOME/dev/adzerk/cli-tools/scripts ] && export ADZERK_SCRIPTS_PATH=$HOME/dev/adzerk/cli-tools/scripts
source ~/.colors
source ~/.aliases

command_exists () {
  type "$1" &> /dev/null ;
}

command_exists zerkenv && source <(zerkenv -i bash)

aws_regions=$(cat << EOT
us-east-1	use1
us-east-2	use2
us-west-1	usw1
us-west-2	usw2
ca-central-1	cac1
eu-west-1	ew1
eu-west-2	ew2
eu-west-3	ew3
eu-central-1	ec1
ap-southeast-1	apse1
ap-southeast-2	apse2
ap-south-1	aps1
ap-northeast-1	apne1
ap-northeast-2	apne2
sa-east-1	sae1
cn-north-1	cn1
EOT
           )

aws-region ()
{
  [[ -n $1 ]] && export AWS_DEFAULT_REGION=$1 && export AWS_REGION=$AWS_DEFAULT_REGION;
  if [[ $1 == 'short' ]]; then
    echo "$aws_regions" | grep ${AWS_DEFAULT_REGION:-none} | cut -f2
  else
    echo $AWS_DEFAULT_REGION
  fi
}

_aws-region() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local ses=$(echo "$aws_regions" | cut -f1)
  COMPREPLY=( $(compgen -W "$ses" -- $cur) )
}
complete -F _aws-region aws-region

aws-console () {
  local cred_process=$(aws configure get credential_process)
  if [[ $cred_process ]]; then
    AWS_PROFILE=$(aws configure get credential_process | cut -d' ' -f4) pacs -o
  else
    local start_url=$(aws configure get sso_start_url)
    local region=$(aws configure get sso_region)
    local account_id=$(aws configure get sso_account_id)
    local role=$(aws configure get sso_role_name)
    $BROWSER $(aws-sso-util console launch \
                 --sso-start-url $start_url \
                 --sso-region $region \
                 --account-id $account_id \
                 --role-name $role \
                 --print
      )
  fi
}

aws-console2 () {
  local fed_url='https://signin.aws.amazon.com/federation'
  local creds=$(aws configure export-credentials)
  local accesskey=$(echo "$creds" | jt AccessKeyId %)
  local secretkey=$(echo "$creds" | jt SecretAccessKey %)
  local token=$(echo "$creds" | jt SessionToken %)
  local data=$(cat <<EOT
{
  "Action": "getSigninToken",
  "Session": {
    "sessionId":"$accesskey",
    "sessionKey":"$secretkey",
    "sessionToken":"$token"
}
EOT
        )
  curl -X POST -d "$data" $fed_url

}

am-i-logged-in-to-aws () {
  local sso_home=~/.aws/sso/cache
  local logged_in=false
  if [[ ! -d $sso_home ]]; then
    echo $logged_in
    return
  fi
  for f in $(ls $sso_home | grep -v boto); do
    # find our token
    if [[ ! "$(cat $sso_home/$f 2> /dev/null| jt startUrl %)" == "https://kevel.awsapps.com/start" ]]; then
      continue
    fi
    expires="$(date -d "$(cat $sso_home/$f | jt expiresAt %)" +%s)"
    now="$(date +%s)"
    # if the expiration of our sso cache has passed, delete it
    if [[ $now -ge $expires ]]; then
      rm -f $sso_home/$f
    else
      logged_in=true
    fi
  done
  echo $logged_in
}

awp () {
  local profile=$1
  export AWS_PROFILE=$profile
  if [[ ! $profile ]]; then
    echo "please provide a profile"
    return
  fi
  local cli_cache=~/.aws/cli/cache
  if [[ $(am-i-logged-in-to-aws) == "false" ]]; then
    aws sso login --profile devopsro.jha
  fi
}

_awp() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local ses=$(cat ~/.aws/config| grep -i '^\[' | cut -f2 -d' ' | sed 's/\]//g')
  COMPREPLY=( $(compgen -W "$ses" -- $cur) )
}

complete -F _awp awp

aws-env-vars () {
  local cmd="aws configure export-credentials --format env"
  if [[ $1 == c ]]; then
    $cmd | pbcopy
  elif [[ $1 == p ]]; then
    $cmd
  else
    eval $($cmd)
  fi
}

aws-logout () {
  aws sso logout
  rm -rf ~/.aws/sso ~/.aws/cli
  unset AWS_PROFILE
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_SESSION_TOKEN
}

add-keys ()
{
  eval $(ssh-agent -s)
  ssh-add $HOME/.ssh/{adzerk.pem,bifrost.pem,reporting.pem,id_rsa}
}

command_exists aws && complete -C $(which aws_completer) aws

# any local tweaks put in there
[[ -s "~/.tweaksrc" ]] && source ~/.tweaksrc

if [[ -d $ADZERK_SCRIPTS_PATH ]]; then
  PATH="$PATH:$ADZERK_SCRIPTS_PATH:$ADZERK_SCRIPTS_PATH/../micha"
  PATH="$PATH:$ADZERK_SCRIPTS_PATH:$ADZERK_SCRIPTS_PATH/../jarrod"
  PATH="$PATH:$ADZERK_SCRIPTS_PATH:$ADZERK_SCRIPTS_PATH/../sean"
fi

[[ -d $PACS_REPO ]] && PATH="$PATH:$PACS_REPO/scripts"

[ -d ~/.scripts ] && export PATH="$PATH:$HOME/.scripts"
[ -d /usr/local/go/bin ] && export PATH="$PATH:/usr/local/go/bin"
[ -d ~/.local/bin ] && export PATH="$PATH:/$HOME/.local/bin"
[ -f ~/.scripts/git-completion.bash ] && source ~/.scripts/git-completion.bash
[ -f ~/.scripts/git-prompt.sh ] && source ~/.scripts/git-prompt.sh

[ `uname` != "Darwin" ] && [ $DISPLAY ] && command_exists xset && xset m 0 0 &> /dev/null

PROMPT_COMMAND=__prompt_command # Func to gen PS1 after CMDs

__prompt_command() {
    local EXIT="$?"
    PS1=""
    # local sep="➤"
    # local sep=""
    # local sep=""
    # local sep=""
    # local sep=""
    # local sep=""
    # local sep=""
    # local sep=""
    local sep="."
    local sep2=""
    local sep3=""
    local sep4=""
    if [ $EXIT != 0 ]; then
        PS1+="${c_red}${sep3}\h($EXIT)"
    else
        PS1+="${c_green}${sep3}\h"
    fi

    local region=$(aws-region)
    if [[ $region ]]; then region="${c_purple}${sep}${region}"; fi

    local loggedincolor=
    if [[ $(am-i-logged-in-to-aws) == "true" ]]; then loggedincolor="${c_orange}"; else loggedincolor="${c_grey}"; fi

    local profile=
    if [[ -n $AWS_PROFILE ]]; then profile="${loggedincolor}${sep}${AWS_PROFILE}"; fi

    local ticket=
    if [[ -n $TICKET ]]; then ticket="${c_magenta}$sep$TICKET"; fi

    local git=$(__git_ps1 '%s')
    if [[ -n $git ]]; then git=" ${c_blue}\$(__git_ps1 '@%s')"; fi

    PS1+="${region}${profile}${ticket} ${c_yellow}${sep2} \w${git}${sep4}${c_reset} "
}

zerkclear () {
  zerkload unset
  unset ZERKENV_MODULES
}

[ -f /Users/sean/.travis/travis.sh ] && source /Users/sean/.travis/travis.sh

hgrep () {
  history | grep "$@"
}

gc ()
{
  local DEVHOME=$HOME/dev
  local no_args=false
  if [[ -z "$1" ]]; then no_args=true; fi
  local action="$2"
  local session_exists=false
  tmux has-session -t "$1" 2> /dev/null
  if [[ $? -eq 0 ]]; then session_exists=true; fi

  if [[ $no_args == true && -n $TMUX ]]; then
    repo="$(tmux display-message -p '#S')"
  else
    repo="$1"
  fi

  local FROM="git@github.com:${repo}"
  local TO="$DEVHOME/${repo}"

  if grep -q "/" <(echo "$1"); then
    if [[ ! -d "$TO" ]]; then
      git clone "$FROM" "$TO" > /dev/null 2>&1
    fi
  fi

  if [[ $action == t ]]; then
    if [[ -z $TMUX ]]; then
      if [[ $session_exists == false ]]; then
        tmux new -s "$1"
      else
        tmux attach -t "$1"
      fi
    else
      if [[ $session_exists == false ]]; then
        TMUX='' tmux new-session -d -s "$1"
      fi
      tmux switch-client -t "$1"
    fi
  elif [[ $action = b ]]; then
    $BROWSER "https://github.com/$1"
  else
    if [[ -d "$TO" ]]; then
      cd "$TO"
    fi 
  fi
}

_gc () {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local ses=$(find $HOME/dev/ -maxdepth 2 -mindepth 2 | rev | cut -d'/' -f1,2  | rev)
  COMPREPLY=( $(compgen -W "$ses" -- $cur) )
}

complete -F _gc gc

if [[ $TMUX ]]; then gc; fi

branch2ticket () {
  export TICKET=$(git rev-parse --abbrev-ref HEAD | cut -d'/' -f2)
}

sr ()
{
    eval $(tmux show-env |sed -n 's/^\(SSH_[^=]*\)=\(.*\)/export \1="\2"/p')
}

ee ()
{
    eval `sed 's/^/export /' $1`
}
[ `uname` != "Darwin" ] && complete -F _minimal ee

function .. { # "cd up" - move up $1 directories
  local num;
  local dest;
  num=${1:-1}
  while [[ $num > 0 ]]; do
    dest="../${dest}"
    (( num-- ))
  done
  cd "${dest}"
}

set -o emacs
bind 'set completion-ignore-case on'

# added by travis gem
[ -f /data/home/sean/.travis/travis.sh ] && source /data/home/sean/.travis/travis.sh

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

if [[ -z "$SSH_CLIENT" ]]; then
  ~/.scripts/welcome.sh
fi

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

complete -C /usr/bin/terraform terraform


###-begin-cdktf-completions-###
#
# yargs command completion script
#
# Installation: cdktf completion >> ~/.bashrc
#    or cdktf completion >> ~/.bash_profile on OSX.
#
_cdktf_yargs_completions()
{
  local cur_word args type_list

  cur_word="${COMP_WORDS[COMP_CWORD]}"
  args=("${COMP_WORDS[@]}")

  # ask yargs to generate completions.
  type_list=$(cdktf --get-yargs-completions "${args[@]}")

  COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )

  # if no match was found, fall back to filename completion
  if [ ${#COMPREPLY[@]} -eq 0 ]; then
    COMPREPLY=()
  fi

  return 0
}
complete -o bashdefault -o default -F _cdktf_yargs_completions cdktf
###-end-cdktf-completions-###
